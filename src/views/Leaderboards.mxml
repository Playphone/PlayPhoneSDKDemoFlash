<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:controls="views.controls.*"
          width="100%" initialize="initializeHandler(event)"
          paddingLeft="5" paddingTop="5" paddingRight="5" gap="5"
        >

    <controls:DropDown id="settings" width="100%"/>
    <s:Button width="100%" click="clickHandler(event)">Load leaderboard!</s:Button>

    <s:List id="list" dragEnabled="true" width="100%" height="100%" enabled="false">
        <s:itemRenderer>
            <fx:Component>
                <s:ItemRenderer>
                    <s:Rect id="item_bkg" height="50" width="100%">
                        <s:fill>
                            <s:SolidColor color="0x999999" alpha="0"/>
                        </s:fill>
                        <s:stroke>
                            <s:SolidColorStroke color="0xcccccc" weight="1"/>
                        </s:stroke>
                    </s:Rect>
                    <s:HGroup>
                        <s:Label id="user_name" verticalAlign="middle" height="50"/>
                        <s:Label id="user_score" verticalAlign="middle" height="50"/>
                    </s:HGroup>

                    <fx:Script><![CDATA[
                        import com.playphone.multinet.core.data.MNWSLeaderboardListItem

                        override public function set data(value: Object): void
                        {
                            var data: MNWSLeaderboardListItem = value as MNWSLeaderboardListItem;
                            user_name.text = data.user_nick_name;
                            user_score.text = data.out_hi_score.toString();
                        }
                        ]]></fx:Script>
                </s:ItemRenderer>
            </fx:Component>
        </s:itemRenderer>
    </s:List>
    <fx:Script><![CDATA[
        import com.playphone.multinet.MNDirect
        import com.playphone.multinet.MNDirectEvent
        import com.playphone.multinet.core.data.MNWSLeaderboardListItem
        import com.playphone.multinet.core.ws.MNWSDefHandlerEvent
        import com.playphone.multinet.core.ws.MNWSRequestContent
        import com.playphone.multinet.core.ws.MNWSRequestDefHandler
        import com.playphone.multinet.core.ws.MNWSRequestSender
        import com.playphone.multinet.providers.MNGameSettingsProvider
        import com.playphone.multinet.providers.MNPluginEvent

        import mx.collections.ArrayList
        import mx.events.FlexEvent

        private var req_block: String;

        private function clickHandler(event: MouseEvent): void
        {
            var selectedItem: Object = settings.dataProvider.getItemAt(settings.selectedIndex);
            MNDirect.setDefaultGameSetId(selectedItem.data.id);

            var handler: MNWSRequestDefHandler = new MNWSRequestDefHandler();
            handler.addEventListener(MNWSDefHandlerEvent.onRequestComplete, onComplete);
            handler.addEventListener(MNWSDefHandlerEvent.onRequestError, onError);

            var content: MNWSRequestContent = new MNWSRequestContent();
            req_block = content..addCurrUserLeaderboard(MNWSRequestContent.LEADERBOARD_SCOPE_GLOBAL,
                                                        MNWSRequestContent.LEADERBOARD_PERIOD_ALL_TIME);

            MNWSRequestSender.instance.sendRequest(content, handler);
        }

        private function onComplete(event: MNWSDefHandlerEvent): void
        {
            var leaderboard: Vector.<MNWSLeaderboardListItem> = event.params[req_block] as Vector.<MNWSLeaderboardListItem>;
            list.dataProvider = new ArrayList(vectorToArray(leaderboard));
        }

        private function vectorToArray(v: Object): Array
        {
            var len: int = v.length;
            var ret: Array = new Array(len);
            for (var i: int = 0; i < len; ++i)
            {
                ret[i] = v[i];
            }
            return ret;
        }

        private function onError(event: MNWSDefHandlerEvent): void
        {
            CrossDemoFlash.showMessage(this, event.params.message);
        }

        private function initializeHandler(event: FlexEvent): void
        {
            if (MNDirect.getSession() == null)
            {
                MNDirect.addEventListener(MNDirectEvent.onDirectSessionReady, onSessionReady);
            }
            else
            {
                onSessionReady(null);
            }
        }

        private function onSessionReady(event: MNDirectEvent): void
        {
            checkSettings();
        }

        private function checkSettings(): void
        {
            if (MNDirect.gameSettingsProvider.isGameSettingListNeedUpdate())
            {
                MNDirect.gameSettingsProvider.addEventListener(MNGameSettingsProvider.onGameSettingsListDownloaded,
                                                               onSettingsReady)
                MNDirect.gameSettingsProvider.doGameSettingListUpdate();
            }
            else
            {
                onSettingsReady(null);
            }
        }

        private function onSettingsReady(event: MNPluginEvent): void
        {
            var packs: Array = MNDirect.gameSettingsProvider.getGameSettingsList();
            var combo_items: Array = [];
            for each(var pack: Object in packs)
            {
                if (pack.name != null)
                {
                    combo_items.push({label:pack.name, data:pack});
                }
                else
                {
                    combo_items.push({label:"Default", data:pack});
                }
            }

            settings.dataProvider = new ArrayList(combo_items);
            settings.selectedIndex = 0;
        }
        ]]></fx:Script>
</s:VGroup>

