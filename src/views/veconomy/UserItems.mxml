<?xml version="1.0"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:controls="views.controls.*"
          width="100%"
          initialize="initializeHandler(event)">

    <s:states>
        <s:State name="Items"/>
        <s:State name="Manager"/>
    </s:states>

    <s:TabBar width="100%" includeIn="Items, Manager" change="tabBar1_changeHandler(event)">
        <mx:ArrayCollection>
            <fx:String>User items</fx:String>
            <fx:String>Mange inventory</fx:String>
        </mx:ArrayCollection>
    </s:TabBar>

    <s:List id="user_items_list" includeIn="Items" initialize="markReady(0)" dragEnabled="true" width="100%"
            height="100%">
        <s:itemRenderer>
            <fx:Component>
                <s:ItemRenderer>
                    <s:Rect height="50" width="100%">
                        <s:fill>
                            <s:SolidColor color="0x999999" alpha="0"/>
                        </s:fill>
                    </s:Rect>
                    <s:HGroup>
                        <s:Label id="item_id" verticalAlign="middle" height="50"/>
                        <s:Label id="item_name" verticalAlign="middle" height="50"/>
                        <s:Label id="item_count" verticalAlign="middle" height="50"/>
                    </s:HGroup>

                    <fx:Script><![CDATA[
                        import com.playphone.multinet.MNDirect

                        override public function set data(value: Object): void
                        {
                            var item:Object = MNDirect.virtualItemsProvider.findGameVItemById(value.id);
                            item_id.text = value.id;
                            item_name.text = item.name;
                            item_count.text = value.count;
                        }
                        ]]></fx:Script>
                </s:ItemRenderer>
            </fx:Component>
        </s:itemRenderer>
    </s:List>

    <s:VGroup includeIn="Manager" width="100%" initialize="markReady(1)">
        <controls:DropDown id="items" width="100%"/>
        <s:HGroup width="100%">
            <s:TextInput id="to_add" width="100%"/>
            <s:Button width="100%" click="button1_clickHandler(event)">Add</s:Button>
        </s:HGroup>
        <s:HGroup width="100%">
            <s:TextInput id="to_remove" width="100%"/>
            <s:Button width="100%" click="button2_clickHandler(event)">Remove</s:Button>
        </s:HGroup>
    </s:VGroup>

    <fx:Script><![CDATA[
        import com.playphone.multinet.MNDirect
        import com.playphone.multinet.MNDirectEvent
        import com.playphone.multinet.providers.MNPluginEvent
        import com.playphone.multinet.providers.MNVitemsProvider
        import com.playphone.multinet.providers.TransactionInfo

        import mx.collections.ArrayList
        import mx.events.FlexEvent

        import spark.events.IndexChangeEvent

        private var isSessionReady: Boolean = false;
        private var isStateReady: Array = [false, false];

        private var updateFunctions: Vector.<Function>

        private function initializeHandler(event: FlexEvent): void
        {
            updateFunctions = new Vector.<Function>();
            updateFunctions.push(updateInventory);
            updateFunctions.push(updateManager);

            if (MNDirect.getSession() == null)
            {
                MNDirect.addEventListener(MNDirectEvent.onDirectSessionReady, onSessionReady);
            }
            else
            {
                onSessionReady(null);
            }
        }

        private function markReady(state_id: int): void
        {
            isStateReady[state_id] = true;
            updateState(state_id);
        }

        private function onSessionReady(event: MNDirectEvent): void
        {
            MNDirect.virtualItemsProvider.addEventListener(MNVitemsProvider.onVItemsTransactionCompleted, onComplete);
            MNDirect.virtualItemsProvider.addEventListener(MNVitemsProvider.onVItemsTransactionFailed, onFail);

            if (MNDirect.virtualShopProvider.isVShopInfoNeedUpdate())
            {
                MNDirect.virtualItemsProvider.addEventListener(MNVitemsProvider.onVItemsListUpdated, onInfoUpdated);
                MNDirect.virtualItemsProvider.doGameVItemsListUpdate();
            }
            else
            {
                isSessionReady = true;
                updateState(0);
            }
        }

        private function onInfoUpdated(event: Event): void
        {
            isSessionReady = true;
            updateState(0);
        }

        private function updateState(state: int): void
        {
            if (isSessionReady && isStateReady[state])
            {
                updateFunctions[state]();
            }
        }

        private function updateInventory(): void
        {
            var userItems: Array = MNDirect.virtualItemsProvider.getPlayerVItemList();
            user_items_list.dataProvider = new ArrayCollection(userItems);
        }

        private function updateManager(): void
        {
            var packs: Array = MNDirect.virtualItemsProvider.getGameVItemsList();
            var combo_items: Array = [];
            for each(var pack: Object in packs)
            {
                combo_items.push({label:pack.name, data:pack});
            }

            items.dataProvider = new ArrayList(combo_items);
            items.selectedIndex = 0;
        }

        private function tabBar1_changeHandler(event: IndexChangeEvent): void
        {
            if (isSessionReady)
            {
                currentState = states[event.newIndex].name;
                updateState(event.newIndex);
            }
        }

        private function button1_clickHandler(event: MouseEvent): void
        {
            var selectedItem: Object = items.dataProvider.getItemAt(items.selectedIndex);
            var trId: int = MNDirect.virtualItemsProvider.getNewClientTransactionId();
            CrossDemoFlash.showMessage(this,
                                       "Transaction ( id=" + trId + " ) started. " + to_add.text + " items will be added");
            MNDirect.virtualItemsProvider.reqAddPlayerVItem(selectedItem.data.id, int(to_add.text), trId);
        }

        private function button2_clickHandler(event: MouseEvent): void
        {
            var selectedItem: Object = items.dataProvider.getItemAt(items.selectedIndex);
            var trId: int = MNDirect.virtualItemsProvider.getNewClientTransactionId();
            CrossDemoFlash.showMessage(this,
                                       "Transaction ( id=" + trId + " ) started. " + to_remove.text + " items will be removed");
            MNDirect.virtualItemsProvider.reqAddPlayerVItem(selectedItem.data.id, -1 * int(to_remove.text), trId);
        }

        private function onComplete(event: MNPluginEvent): void
        {
            var info: TransactionInfo = event.params as TransactionInfo;
            CrossDemoFlash.showMessage(this, "Transaction ( id=" + info.clientTransactionId + " ) completed");
        }

        private function onFail(event: MNPluginEvent): void
        {
            CrossDemoFlash.showMessage(this, "Transaction ( id=" + event.params.clientTransactionId + " ) failed. " +
                                             event.params.failReasonCode + ":" + event.params.errorMessage);
        }
        ]]></fx:Script>
</s:VGroup>